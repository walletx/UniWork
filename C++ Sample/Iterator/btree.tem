//COMP6771 Assignment 4 - Pongpol Trisuwan (z3471079)

/*********** BTREE INTERFACE ***********/

template <typename T> 
btree<T>::btree(size_t maxNodeElems) : nodeCap{maxNodeElems} {
    root = new Node(nullptr, maxNodeElems);
    sentinel = new Node(nullptr, 0);
}

//Copy Constructor
template <typename T> 
btree<T>::btree(const btree<T>& original) {
    
    nodeCap = original.nodeCap;
        
    delete root;
    root = nullptr;
    
    delete sentinel;
    sentinel = new Node(nullptr, 0);
            
    std::queue<std::pair<Node*, Node*>> node_queue;
    typename std::vector<T>::iterator bound_iter;
    unsigned int bound_index;
    std::pair<Node*, Node*> node_and_parent;
    
    Node *newRoot = new Node(nullptr, original.nodeCap);
    for (unsigned int i = 0; i < original.root->elements.size(); ++i) {
        newRoot->elements.push_back(original.root->elements[i]);
    }
        
    for (unsigned int i = 0; i < original.root->children.size(); ++i) {
        if (original.root->children[i] != nullptr) {
            node_queue.push(std::make_pair(original.root->children[i], newRoot));
        }
    }
    
    root = newRoot;
    
    while(!node_queue.empty()) {

        
        node_and_parent = node_queue.front();
        node_queue.pop();

        Node *newNode = new Node(node_and_parent.second, nodeCap);
        
        for (unsigned int i = 0; i < node_and_parent.first->elements.size(); ++i) {
            newNode->elements.push_back(node_and_parent.first->elements[i]);
        }

        for (unsigned int i = 0; i < node_and_parent.first->children.size(); ++i) {
            if (node_and_parent.first->children[i] != nullptr) {
                node_queue.push(std::make_pair(node_and_parent.first->children[i], newNode));
            }
        }
                
        bound_iter = std::lower_bound(node_and_parent.second->elements.begin(), node_and_parent.second->elements.end(), newNode->elements[0]);
        bound_index = static_cast<unsigned int>(std::distance(node_and_parent.second->elements.begin(), bound_iter));
        
        node_and_parent.second->children[bound_index] = newNode;        
    }
        
}

//Move Constructor
template <typename T> 
btree<T>::btree(btree<T>&& original) {
        
    nodeCap = original.nodeCap;
    delete sentinel;
    sentinel = original.sentinel;
    delete root;        
    root = original.root;
    
    original.root = new Node(nullptr, original.nodeCap);
    original.sentinel = new Node(nullptr, 0);
        
}

//Copy Assignment
template <typename T> 
btree<T>& btree<T>::operator=(const btree<T>& rhs) {
        
    if (this != &rhs) {
        
        nodeCap = rhs.nodeCap;
                
        delete root;
        root = nullptr;
        
        delete sentinel;
        sentinel = new Node(nullptr, 0);
            
        std::queue<std::pair<Node*, Node*>> node_queue;
        typename std::vector<T>::iterator bound_iter;
        unsigned int bound_index;
        std::pair<Node*, Node*> node_and_parent;
    
        Node *newRoot = new Node(nullptr, rhs.nodeCap);
        for (unsigned int i = 0; i < rhs.root->elements.size(); ++i) {
            newRoot->elements.push_back(rhs.root->elements[i]);
        }
        
        for (unsigned int i = 0; i < rhs.root->children.size(); ++i) {
            if (rhs.root->children[i] != nullptr) {
                node_queue.push(std::make_pair(rhs.root->children[i], newRoot));
            }
        }
    
        root = newRoot;
    
        while(!node_queue.empty()) {

        
            node_and_parent = node_queue.front();
            node_queue.pop();

            Node *newNode = new Node(node_and_parent.second, nodeCap);
        
            for (unsigned int i = 0; i < node_and_parent.first->elements.size(); ++i) {
                newNode->elements.push_back(node_and_parent.first->elements[i]);
            }

            for (unsigned int i = 0; i < node_and_parent.first->children.size(); ++i) {
                if (node_and_parent.first->children[i] != nullptr) {
                    node_queue.push(std::make_pair(node_and_parent.first->children[i], newNode));
                }
            }
                
            bound_iter = std::lower_bound(node_and_parent.second->elements.begin(), node_and_parent.second->elements.end(), newNode->elements[0]);
            bound_index = static_cast<unsigned int>(std::distance(node_and_parent.second->elements.begin(), bound_iter));
        
            node_and_parent.second->children[bound_index] = newNode;        
        }
    
    }
    
    return *this;
}

//Move Assignment
template <typename T> 
btree<T>& btree<T>::operator=(btree<T>&& rhs) {
    
    if (this != &rhs) {   
                     
        nodeCap = rhs.nodeCap;
        delete sentinel;
        sentinel = rhs.sentinel;
        delete root;        
        root = rhs.root;
        
        rhs.root = new Node(nullptr, rhs.nodeCap);
        rhs.sentinel = new Node(nullptr, 0);
        
    }
    
    return *this; 
}

//Destructor
template<typename T>
btree<T>::~btree() {
    
    delete sentinel;
    sentinel = nullptr;
    
    delete root;
    root = nullptr;
}

template<typename T>
std::ostream& operator<< (std::ostream& os, const btree<T>& tree) {
        
    std::queue<typename btree<T>::Node*> node_queue;
    typename btree<T>::Node *pointee = tree.root;
    node_queue.push(pointee);
        
    while(!node_queue.empty()) {
                
        pointee = node_queue.front();
        node_queue.pop();
                                
        for (unsigned int i = 0; i < pointee->elements.size(); ++i) {
            os << pointee->elements[i] << " ";
        }
                
        for (unsigned int i = 0; i < pointee->children.size(); ++i) {
            if (pointee->children[i] != nullptr) {
                node_queue.push(pointee->children[i]);
            }
        }
        
    }
        
    return os;
}

template<typename T>
typename btree<T>::iterator btree<T>::find(const T& elem) {
        
    Node *pointee = root;
    typename std::vector<T>::iterator bound_iter;
    unsigned int bound_index;
        
    if (root->elements.size() != 0) {
        while (true) {
        
            bound_iter = std::lower_bound(pointee->elements.begin(), pointee->elements.end(), elem);
            bound_index = static_cast<unsigned int>(std::distance(pointee->elements.begin(), bound_iter));
                
            if (bound_index < pointee->elements.size() && pointee->elements[bound_index] == elem) {
                return iterator(pointee, bound_index, this); 
            }
        
            if (pointee->children[bound_index] == nullptr) {
                return end();
            }
        
            pointee = pointee->children[bound_index];
        
        }
    }
    
    return end();
}

template<typename T>
typename btree<T>::const_iterator btree<T>::find(const T& elem) const {
        
    Node *pointee = root;
    typename std::vector<T>::iterator bound_iter;
    unsigned int bound_index;
        
    if (root->elements.size() != 0) {
        while (true) {
        
            bound_iter = std::lower_bound(pointee->elements.begin(), pointee->elements.end(), elem);
            bound_index = static_cast<unsigned int>(std::distance(pointee->elements.begin(), bound_iter));
                
            if (bound_index < pointee->elements.size() && pointee->elements[bound_index] == elem) {
                return const_iterator(pointee, bound_index, this); 
            }
        
            if (pointee->children[bound_index] == nullptr) {
                return cend();
            }
        
            pointee = pointee->children[bound_index];
        
        }
    }
    
    return cend();
}

template<typename T>
std::pair<typename btree<T>::iterator, bool> btree<T>::insert(const T& elem) {
        
    Node *pointee = root;
    typename std::vector<T>::iterator bound_iter;
    unsigned int bound_index;
    bool inserted = false;
        
    while (true) {
        
        bound_iter = std::lower_bound(pointee->elements.begin(), pointee->elements.end(), elem);
        bound_index = static_cast<unsigned int>(std::distance(pointee->elements.begin(), bound_iter));
                        
        if (bound_index < pointee->elements.size() && pointee->elements[bound_index] == elem) {
            break;
        }
                
        if (pointee->elements.size() < nodeCap) {
            
            pointee->elements.push_back(elem);
            std::sort(pointee->elements.begin(), pointee->elements.end());
            inserted = true;
            break;
            
        } else {
            
            if (pointee->children[bound_index] == nullptr) {
                pointee->children[bound_index] = new Node(pointee, nodeCap);
            } 
            
            pointee = pointee->children[bound_index];
        }
        
    }
        
    auto iter = iterator(pointee, bound_index, this);
    
    auto returnPair = std::make_pair(iter, inserted);
        
    return returnPair;
}

/*********** BTREE ITERATOR FUNCTION ***********/

template <typename T>
typename btree<T>::iterator btree<T>::begin() {
            
    if (root->elements.size() != 0) {
        
        Node *pointee = root;
    
        while (pointee->children[0] != nullptr) {
            pointee = pointee->children[0];
        }
        
        return iterator(pointee, 0, this);
    }

    return iterator(sentinel, 0, this);
}

template <typename T>
typename btree<T>::iterator btree<T>::end() {
    
    return iterator(sentinel, 0, this);

}

template <typename T>
typename btree<T>::reverse_iterator btree<T>::rbegin() {
    return reverse_iterator(end());
}

template <typename T>
typename btree<T>::reverse_iterator btree<T>::rend() {
    return reverse_iterator(begin());
}

template <typename T>
typename btree<T>::const_iterator btree<T>::begin() const {
            
    if (root->elements.size() != 0) {
        
        Node *pointee = root;
    
        while (pointee->children[0] != nullptr) {
            pointee = pointee->children[0];
        }
        
        return const_iterator(pointee, 0, this);
    }

    return const_iterator(sentinel, 0, this);
}

template <typename T>
typename btree<T>::const_iterator btree<T>::end() const {
    
    return const_iterator(sentinel, 0, this);
}

template <typename T>
typename btree<T>::const_reverse_iterator btree<T>::rbegin() const {
    return const_reverse_iterator(cend());
}

template <typename T>
typename btree<T>::const_reverse_iterator btree<T>::rend() const {
    return const_reverse_iterator(cbegin());
}


template <typename T>
typename btree<T>::const_iterator btree<T>::cbegin() const {
            
    if (root->elements.size() != 0) {
        
        Node *pointee = root;
    
        while (pointee->children[0] != nullptr) {
            pointee = pointee->children[0];
        }
        
        return const_iterator(pointee, 0, this);
    }

    return const_iterator(sentinel, 0, this);
}

template <typename T>
typename btree<T>::const_iterator btree<T>::cend() const {
    
    return const_iterator(sentinel, 0, this);
}

template <typename T>
typename btree<T>::const_reverse_iterator btree<T>::crbegin() const {
    return const_reverse_iterator(cend());
}

template <typename T>
typename btree<T>::const_reverse_iterator btree<T>::crend() const {
    return const_reverse_iterator(cbegin());
}

/*********** NODE INTERFACE ***********/

template <typename T> 
btree<T>::Node::Node(Node *parentPtr, size_t nodeCap) {
    parent = parentPtr;
    for (unsigned int i = 0; i <= nodeCap; ++i) {
        children.push_back(nullptr);
    }
}

template <typename T> 
btree<T>::Node::~Node() {
    
    parent = nullptr;
    
    for (unsigned int i = 0; i < children.size(); ++i) {
        delete children[i];
        children[i] = nullptr;
    }
    
    children.clear();
}
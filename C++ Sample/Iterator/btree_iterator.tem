//COMP6771 Assignment 4 - Pongpol Trisuwan (z3471079)        

/*********** BTREE_ITERATOR INTERFACE ***********/

template<typename T>
btree_iterator<T>::btree_iterator() {}

template<typename T>
btree_iterator<T>::btree_iterator(typename btree<T>::Node *pntee) : pointee{pntee} {}

template<typename T>
btree_iterator<T>::btree_iterator(typename btree<T>::Node *pntee, int nindex)
    : pointee{pntee}, node_index{nindex} {}

template<typename T>
btree_iterator<T>::btree_iterator(typename btree<T>::Node *pntee, int nindex, const btree<T> *tree_ptr) 
    : pointee{pntee}, node_index{nindex}, tree{tree_ptr} {}


template <typename T>
btree_iterator<T>::btree_iterator(const btree_iterator<T>& rhs): pointee(rhs.pointee), node_index(rhs.node_index), tree(rhs.tree) {}

template <typename T>
btree_iterator<T>& btree_iterator<T>::operator=(const btree_iterator<T>& rhs) {
    
    if (this != &rhs) {
        pointee = rhs.pointee;
        node_index = rhs.node_index;
        tree = rhs.tree;
    }
    
    return *this;
}

template<typename T> typename btree_iterator<T>::reference
btree_iterator<T>::operator *() const {
    return pointee->elements[node_index];
}

template<typename T> typename btree_iterator<T>::pointer
btree_iterator<T>::operator ->() const {
    return &(operator*());
}

template<typename T>
btree_iterator<T>& btree_iterator<T>::operator ++() {
        
    if (tree->root->elements.size() != 0) {
        
        // Case for traversing up
        if (node_index < static_cast<int>(pointee->elements.size()) && pointee->children[node_index + 1] != nullptr) {
            
            pointee = pointee->children[node_index + 1];
            node_index = 0;
                    
            while (pointee->children[node_index] != nullptr) {
                pointee = pointee->children[node_index];
            }
        
        } else if (static_cast<int>(pointee->elements.size()) == node_index + 1) {
            
            // Case for traversing down
            if (pointee->parent != nullptr) {
                
                typename btree<T>::Node *temp_pointee = pointee;
                int temp_node_index = node_index;
                bool lastnode = false; // boolean for check last element in tree
        
                while (temp_pointee->parent != nullptr && static_cast<int>(temp_pointee->elements.size()) <= temp_node_index + 1) {
                    for (unsigned int i = 0; i < temp_pointee->parent->elements.size(); ++i) {
                        if (temp_pointee->elements[0] < temp_pointee->parent->elements[i]) {
                            temp_node_index = i;
                            lastnode = false;
                            break;
                        } else if (i == temp_pointee->parent->elements.size() - 1) {
                            temp_node_index = i + 1;
                            lastnode = true;
                        }
                    }
                    temp_pointee = temp_pointee->parent;
                    if (lastnode == false) {break;}
                }
                
                // Handling last element in tree
                if (static_cast<int>(pointee->elements.size()) <= temp_node_index && lastnode == true) {
                    pointee = tree->sentinel;
                    node_index = 0;
                } else {
                    pointee = temp_pointee;
                    node_index = temp_node_index;
                }
                
            } else {
                pointee = tree->sentinel;
                node_index = 0;
            }

                        
        } else {
            // Case for incrementing within node         
            ++node_index;
        }
    } else if (pointee == tree->sentinel) {
        
        // Case for sentinel handling
        pointee = tree->root;
        node_index = 0;
        
        while (pointee->children[node_index] != nullptr) {
            pointee = pointee->children[node_index];
        }
    }        
    
    
    return *this;
}

template<typename T>
btree_iterator<T>& btree_iterator<T>::operator --() {
        
    if (tree->root->elements.size() != 0 && pointee != tree->sentinel) {
        
        // Case for traversing up                
        if (node_index > -1 && pointee->children[node_index] != nullptr) {
                  
            pointee = pointee->children[node_index];
      
            while (pointee->children[pointee->elements.size()] != nullptr) {
                pointee = pointee->children[pointee->elements.size()];
            }
            
            node_index = pointee->elements.size() - 1;
      
        } else if (node_index == 0) {
        
        // Case for traversing down    
        if (pointee->parent != nullptr) {
                  
            typename btree<T>::Node *temp_pointee = pointee;
            int temp_node_index = node_index;
            bool lastnode = false; // boolean for check last element in tree
    
            while (temp_pointee->parent != nullptr && temp_node_index <= 0) {
                for (int i = static_cast<int>(temp_pointee->parent->elements.size()) - 1; i > -1; --i) {
                    if (temp_pointee->elements[0] > temp_pointee->parent->elements[i]) {
                        temp_node_index = i;
                        lastnode = false;
                        break;
                    } else if (i == 0) {
                        temp_node_index = -1;
                        lastnode = true;
                    }
                }
                temp_pointee = temp_pointee->parent;
                if (lastnode == false) {break;}
            }
    
            // Handling last element in tree
            if (temp_node_index >= -1 && lastnode == true) {
                pointee = tree->sentinel;
                node_index = 0;
            } else {
                pointee = temp_pointee;
                node_index = temp_node_index;
            }
        } else {
            pointee = tree->sentinel;
            node_index = 0;
        }
                    
        } else {
            // Case for incrementing within node
            --node_index;
        }
    } else if (pointee == tree->sentinel) {
        
        // Case for sentinel handling        
        pointee = tree->root;        
        
        while (pointee->children[pointee->elements.size()] != nullptr) {
            pointee = pointee->children[pointee->elements.size()];
        }
        
        node_index = pointee->elements.size() - 1;
    }
        
    return *this;
}

template<typename T>
btree_iterator<T> btree_iterator<T>::operator ++(int) {
    btree_iterator<T> temp_tree(*this);
    ++(*this);
    return temp_tree;
}

template<typename T>
btree_iterator<T> btree_iterator<T>::operator --(int) {
    btree_iterator<T> temp_tree(*this);
    --(*this);
    return temp_tree;
}

template<typename T>
bool btree_iterator<T>::operator==(const btree_iterator<T>& other) const {
    return (pointee == other.pointee) && (node_index == other.node_index);
}

template<typename T>
bool btree_iterator<T>::operator!=(const btree_iterator<T>& other) const {
    return !operator==(other);
}

template<typename T>
bool btree_iterator<T>::operator==(const const_btree_iterator<T>& other) const {
    return (pointee == other.pointee) && (node_index == other.node_index);
}

template<typename T>
bool btree_iterator<T>::operator!=(const const_btree_iterator<T>& other) const {
    return !operator==(other);
}

/*********** CONST_BTREE_ITERATOR INTERFACE ***********/

template<typename T>
const_btree_iterator<T>::const_btree_iterator() {}

template<typename T>
const_btree_iterator<T>::const_btree_iterator(typename btree<T>::Node *pntee) : pointee{pntee} {}

template<typename T>
const_btree_iterator<T>::const_btree_iterator(typename btree<T>::Node *pntee, int nindex)
    : pointee{pntee}, node_index{nindex} {}

template<typename T>
const_btree_iterator<T>::const_btree_iterator(typename btree<T>::Node *pntee, int nindex, const btree<T> *tree_ptr) 
    : pointee{pntee}, node_index{nindex}, tree{tree_ptr} {}

template<typename T>
const_btree_iterator<T>::const_btree_iterator(const btree_iterator<T>& rhs): pointee(rhs.pointee), node_index(rhs.node_index), tree(rhs.tree) {}

template <typename T>
const_btree_iterator<T>::const_btree_iterator(const const_btree_iterator<T>& rhs): pointee(rhs.pointee), node_index(rhs.node_index), tree(rhs.tree) {}

template <typename T>
const_btree_iterator<T>& const_btree_iterator<T>::operator=(const btree_iterator<T>& rhs) {
    
    if (this != &rhs) {
        pointee = rhs.pointee;
        node_index = rhs.node_index;
        tree = rhs.tree;
    }
    
    return *this;
}

template <typename T>
const_btree_iterator<T>& const_btree_iterator<T>::operator=(const const_btree_iterator<T>& rhs) {
    
    if (this != &rhs) {
        pointee = rhs.pointee;
        node_index = rhs.node_index;
        tree = rhs.tree;
    }
    
    return *this;
}

template<typename T> typename const_btree_iterator<T>::reference
const_btree_iterator<T>::operator *() const {
    return pointee->elements[node_index];
}

template<typename T> typename const_btree_iterator<T>::pointer
const_btree_iterator<T>::operator ->() const {
    return &(operator*());
}

template<typename T>
const_btree_iterator<T>& const_btree_iterator<T>::operator ++() {
        
    if (tree->root->elements.size() != 0) {
        
        // Case for traversing down
        if (node_index < static_cast<int>(pointee->elements.size()) && pointee->children[node_index + 1] != nullptr) {
            
            pointee = pointee->children[node_index + 1];
            node_index = 0;
                    
            while (pointee->children[node_index] != nullptr) {
                pointee = pointee->children[node_index];
            }
        
        } else if (static_cast<int>(pointee->elements.size()) == node_index + 1) {
            
            // Case for traversing up
            if (pointee->parent != nullptr) {
                
                typename btree<T>::Node *temp_pointee = pointee;
                int temp_node_index = node_index;
                bool lastnode = false; // boolean for check last element in tree
        
                while (temp_pointee->parent != nullptr && static_cast<int>(temp_pointee->elements.size()) <= temp_node_index + 1) {
                    for (unsigned int i = 0; i < temp_pointee->parent->elements.size(); ++i) {
                        if (temp_pointee->elements[0] < temp_pointee->parent->elements[i]) {
                            temp_node_index = i;
                            lastnode = false;
                            break;
                        } else if (i == temp_pointee->parent->elements.size() - 1) {
                            temp_node_index = i + 1;
                            lastnode = true;
                        }
                    }
                    temp_pointee = temp_pointee->parent;
                    if (lastnode == false) {break;}
                }
                
                // Handling last element in tree
                if (static_cast<int>(pointee->elements.size()) <= temp_node_index && lastnode == true) {
                    pointee = tree->sentinel;
                    node_index = 0;
                } else {
                    pointee = temp_pointee;
                    node_index = temp_node_index;
                }
                
            } else {
                pointee = tree->sentinel;
                node_index = 0;
            }

                        
        } else {
            // Case for incrementing within node
            ++node_index;
        }
    } else if (pointee == tree->sentinel) {
        
        // Case for sentinel handling
        pointee = tree->root;
        node_index = 0;
        
        while (pointee->children[node_index] != nullptr) {
            pointee = pointee->children[node_index];
        }
    }        
        
    return *this;
}

template<typename T>
const_btree_iterator<T>& const_btree_iterator<T>::operator --() {
    
    if (tree->root->elements.size() != 0 && pointee != tree->sentinel) {
        
        // Case for traversing down                
        if (node_index > -1 && pointee->children[node_index] != nullptr) {
                  
            pointee = pointee->children[node_index];
      
            while (pointee->children[pointee->elements.size()] != nullptr) {
                pointee = pointee->children[pointee->elements.size()];
            }
            
            node_index = pointee->elements.size() - 1;
      
        } else if (node_index == 0) {
        
        // Case for traversing up    
        if (pointee->parent != nullptr) {
                  
            typename btree<T>::Node *temp_pointee = pointee;
            int temp_node_index = node_index;
            bool lastnode = false; // boolean for check last element in tree
    
            while (temp_pointee->parent != nullptr && temp_node_index <= 0) {
                for (int i = static_cast<int>(temp_pointee->parent->elements.size()) - 1; i > -1; --i) {
                    if (temp_pointee->elements[0] > temp_pointee->parent->elements[i]) {
                        temp_node_index = i;
                        lastnode = false;
                        break;
                    } else if (i == 0) {
                        temp_node_index = -1;
                        lastnode = true;
                    }
                }
                temp_pointee = temp_pointee->parent;
                if (lastnode == false) {break;}
            }
    
            // Handling last element in tree
            if (temp_node_index >= -1 && lastnode == true) {
                pointee = tree->sentinel;
                node_index = 0;
            } else {
                pointee = temp_pointee;
                node_index = temp_node_index;
            }
        } else {
            pointee = tree->sentinel;
            node_index = 0;
        }
                    
        } else {
            // Case for incrementing within node
            --node_index;
        }
    } else if (pointee == tree->sentinel) {
        
        // Case for sentinel handling        
        pointee = tree->root;        
        
        while (pointee->children[pointee->elements.size()] != nullptr) {
            pointee = pointee->children[pointee->elements.size()];
        }
        
        node_index = pointee->elements.size() - 1;
    }
    
    return *this;
}

template<typename T>
const_btree_iterator<T> const_btree_iterator<T>::operator ++(int) {
    const_btree_iterator<T> temp_tree(*this);
    ++(*this);
    return temp_tree;
}

template<typename T>
const_btree_iterator<T> const_btree_iterator<T>::operator --(int) {
    const_btree_iterator<T> temp_tree(*this);
    --(*this);
    return temp_tree;
}

template<typename T>
bool const_btree_iterator<T>::operator==(const const_btree_iterator<T>& other) const {
    return (pointee == other.pointee) && (node_index == other.node_index);
}

template<typename T>
bool const_btree_iterator<T>::operator!=(const const_btree_iterator<T>& other) const {
    return !operator==(other);
}

template<typename T>
bool const_btree_iterator<T>::operator==(const btree_iterator<T>& other) const {
    return (pointee == other.pointee) && (node_index == other.node_index);
}

template<typename T>
bool const_btree_iterator<T>::operator!=(const btree_iterator<T>& other) const {
    return !operator==(other);
}